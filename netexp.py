import json
import pandas as pd
import pickle


def load_reaction_data(fp):
    """ Loads pre-defined reaction information

    Assumes reaction data is in a json file, with the products and substrates
    separated.

    Args:
        fp (string): filepath to pre-defined reaction json

    Returns:
        dict, dict: dictionaries containing products and substrates data.
    """
    with open(fp) as json_file:
        data = json.load(json_file)

    return data["products"], data["substrates"]


def load_seeds(fp):
    """ Read in seed sets

    Assumes seed sets are in a txt file with one seed set per line

    Args:
        fp (string): filepath to seed text file

    Returns:
        2D list: list of all seed sets (each their own individual lists)
    """
    with open(fp) as f:
        seed_list = []
        for line in f:
            seed_list.append(line.split())

    return seed_list


def turn_on_reactions(cum_cpds, cum_rxns, products, substrates):
    """ Finds all reactions which should be turned on.

    Given a list of compounds, finds all reactions which have a full set of
    products or substrates present in the cumulative compound set.

    Args:
        cum_cpds (list): list of all compounds found
        cum_rxns (list): list of all reactions found
        products (dict): dictionary of rxn:[] for all products in a dataset
        substrates (dict): dictionary of rxn:[] for all substrates in a dataset

    Returns:
        list: list of new compounds found
    """
    new_rxns = []

    #Add new compounds from product -> substrate
    for rxn in products.keys():
        cpds = products[rxn]["cpds"]
        dir = products[rxn]["dir"]
        if (dir == "RIGHT-TO-LEFT" or dir == "PHYSIOL-RIGHT-TO-LEFT" or dir == "REVERSIBLE" or dir=="") and set(cpds).issubset(cum_cpds):
            new_rxns.append(rxn)

    #Add new compounds from substrate -> product
    for rxn in substrates.keys():
        cpds = substrates[rxn]["cpds"]
        dir = substrates[rxn]["dir"]
        if (dir == "LEFT-TO-RIGHT" or dir == "PHYSIOL-LEFT-TO-RIGHT" or dir == "REVERSIBLE" or dir=="") and set(cpds).issubset(cum_cpds):
            new_rxns.append(rxn)

    return list(set(new_rxns) - set(cum_rxns))


def add_cpds(rxns, cum_cpds, substrates, products):
    """ Add all compounds associated with a given set of reactions to the
    cumulative cpd list

    Takes a list of reactions and adds all new compounds generated by those
    reactions (forward and backwards) to the growing list of compounds

    Args:
        rxns (list): reactions which were newly added to the expansion
        cum_cpds (list): all compounds currently found by network expansion
        products (dict): dictionary of rxn:[] for all products in a dataset
        substrates (dict): dictionary of rxn:[] for all substrates in a dataset

    Returns:
        list: all new compounds added to the expansion
    """
    new_cpds = []
    for rxn in rxns:
        new_cpds.extend(products[rxn]["cpds"]) #Note: added extra [cpds] for metacyc analysis
        new_cpds.extend(substrates[rxn]["cpds"])

    #Return new compounds, excluding those already in the cumulative set
    return list(set(new_cpds) - set(cum_cpds))


def run_network_expansion(seeds, products, substrates, count):
    """ Runs the full network expansion algorithm for a given set of seeds


    Args:
        seeds (list): compound IDs of starting expansion seeds
        products (dict): dictionary of rxn:[] for all products in a dataset
        substrates (dict): dictionary of rxn:[] for all substrates in a dataset
    """
    cum_rxns = []
    new_rxns = []
    cum_cpds = seeds
    flag = 1
    count = 0
    output_df = pd.DataFrame(columns=[
        "compounds_cumulative", "compounds_new", "reactions_cumulative",
        "reactions_new", "n_compounds_cumulative", "n_compounds_new",
        "n_reactions_cumulative", "n_reactions_new"
    ])

    while flag:
        #Step 1: add newly found cps associated with reactions to cumulative cpds
        new_cpds = add_cpds(new_rxns, cum_cpds, products, substrates)
        cum_cpds.extend(new_cpds)

        #Step 2: turn on new reactions
        new_rxns = turn_on_reactions(cum_cpds, cum_rxns, products, substrates)

        #Stop expansion if no new reactions are added
        if len(new_rxns) == 0:
            flag = 0

        #Step 3: add reactions to cumulative rxns
        cum_rxns.extend(new_rxns)
        count += 1

        #Create pandas series from data
        s = pd.Series([
            cum_cpds, new_cpds, cum_rxns, new_rxns,
            len(cum_cpds),
            len(new_cpds),
            len(cum_rxns),
            len(new_rxns)
        ],
                      index=[
                          "compounds_cumulative", "compounds_new",
                          "reactions_cumulative", "reactions_new",
                          "n_compounds_cumulative", "n_compounds_new",
                          "n_reactions_cumulative", "n_reactions_new"
                      ])

        output_df = output_df.append(s, ignore_index=True)

    #Print final stats # TODO: make this a specific function?
    print("New cpd size:", len(new_cpds))
    print("Cumulative cpd size:", len(cum_cpds))
    print("New reaction size:", len(new_rxns))
    print("Cumulative reaction size", len(cum_rxns))
    print("Generations:", count)

    #Test output
    print(cum_rxns)
    print(cum_cpds)

    pickle.dump(output_df,
                file=open("Data/Output/output_" + str(count) + ".p", "wb"))


def main():
    fp = "Data/metacyc_reactions_edges.json"
    products, substrates = load_reaction_data(fp)

    seed_list = load_seeds("Seeds/metacyc_test.txt")

    #Run network expansion over each seed set
    count = 0
    for seeds in seed_list:
        run_network_expansion(seeds, products, substrates, count)
        count += 1


if __name__ == "__main__":
    main()
